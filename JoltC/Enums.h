#pragma once

#include <stdint.h>

const int JPC_MAX_PHYSICS_JOBS = 2048;
const int JPC_MAX_PHYSICS_BARRIERS = 8;
const float JPC_DEFAULT_COLLISION_TOLERANCE = 1.0e-4f;
const float JPC_DEFAULT_PENETRATION_TOLERANCE = 1.0e-4f;
const float JPC_DEFAULT_CONVEX_RADIUS = 0.05f;
const float JPC_CAPSULE_PROJECTION_SLOP = 0.02f;

ENSURE_EQUAL(JPC_MAX_PHYSICS_JOBS, JPH::cMaxPhysicsJobs)
ENSURE_EQUAL(JPC_MAX_PHYSICS_BARRIERS, JPH::cMaxPhysicsBarriers)
ENSURE_EQUAL(JPC_DEFAULT_COLLISION_TOLERANCE, JPH::cDefaultCollisionTolerance)
ENSURE_EQUAL(JPC_DEFAULT_PENETRATION_TOLERANCE, JPH::cDefaultPenetrationTolerance)
ENSURE_EQUAL(JPC_DEFAULT_CONVEX_RADIUS, JPH::cDefaultConvexRadius)
ENSURE_EQUAL(JPC_CAPSULE_PROJECTION_SLOP, JPH::cCapsuleProjectionSlop)

typedef enum JPC_MotionType: uint8_t {
	JPC_MOTION_TYPE_STATIC,
	JPC_MOTION_TYPE_KINEMATIC,
	JPC_MOTION_TYPE_DYNAMIC,
} JPC_MotionType;

ENSURE_ENUM_EQ(JPC_MOTION_TYPE_STATIC,    JPH::EMotionType::Static)
ENSURE_ENUM_EQ(JPC_MOTION_TYPE_KINEMATIC, JPH::EMotionType::Kinematic)
ENSURE_ENUM_EQ(JPC_MOTION_TYPE_DYNAMIC,   JPH::EMotionType::Dynamic)

typedef enum JPC_MotionQuality: uint8_t {
	JPC_MOTION_QUALITY_DISCRETE,
	JPC_MOTION_QUALITY_LINEAR_CAST,
} JPC_MotionQuality;

ENSURE_ENUM_EQ(JPC_MOTION_QUALITY_DISCRETE,    JPH::EMotionQuality::Discrete)
ENSURE_ENUM_EQ(JPC_MOTION_QUALITY_LINEAR_CAST, JPH::EMotionQuality::LinearCast)

typedef enum JPC_OverrideMassProperties: uint8_t {
	JPC_OVERRIDE_MASS_PROPS_CALC_MASS_INERTIA,
	JPC_OVERRIDE_MASS_PROPS_CALC_INERTIA,
	JPC_OVERRIDE_MASS_PROPS_MASS_INERTIA_PROVIDED,
} JPC_OverrideMassProperties;

ENSURE_ENUM_EQ(JPC_OVERRIDE_MASS_PROPS_CALC_MASS_INERTIA,
			   JPH::EOverrideMassProperties::CalculateMassAndInertia);
ENSURE_ENUM_EQ(JPC_OVERRIDE_MASS_PROPS_CALC_INERTIA,
			   JPH::EOverrideMassProperties::CalculateInertia);
ENSURE_ENUM_EQ(JPC_OVERRIDE_MASS_PROPS_MASS_INERTIA_PROVIDED,
			   JPH::EOverrideMassProperties::MassAndInertiaProvided);

typedef enum JPC_GroundState: uint32_t {
	JPC_CHARACTER_GROUND_STATE_ON_GROUND,
	JPC_CHARACTER_GROUND_STATE_ON_STEEP_GROUND,
	JPC_CHARACTER_GROUND_STATE_NOT_SUPPORTED,
	JPC_CHARACTER_GROUND_STATE_IN_AIR,
} JPC_GroundState;

// ENSURE_ENUM_EQ(JPC_CHARACTER_GROUND_STATE_ON_GROUND, JPH::EGroundState::OnGround)
// ENSURE_ENUM_EQ(JPC_CHARACTER_GROUND_STATE_ON_STEEP_GROUND, JPH::EGroundState::OnSteepGround)
// ENSURE_ENUM_EQ(JPC_CHARACTER_GROUND_STATE_NOT_SUPPORTED, JPH::EGroundState::NotSupported)
// ENSURE_ENUM_EQ(JPC_CHARACTER_GROUND_STATE_IN_AIR, JPH::EGroundState::InAir)

typedef enum JPC_Activation: uint32_t {
	JPC_ACTIVATION_ACTIVATE      = 0,
	JPC_ACTIVATION_DONT_ACTIVATE = 1,
} JPC_Activation;

ENSURE_ENUM_EQ(JPC_ACTIVATION_ACTIVATE,      JPH::EActivation::Activate)
ENSURE_ENUM_EQ(JPC_ACTIVATION_DONT_ACTIVATE, JPH::EActivation::DontActivate)

typedef enum JPC_ValidateResult: uint32_t {
	JPC_VALIDATE_RESULT_ACCEPT_ALL_CONTACTS,
	JPC_VALIDATE_RESULT_ACCEPT_CONTACT,
	JPC_VALIDATE_RESULT_REJECT_CONTACT,
	JPC_VALIDATE_RESULT_REJECT_ALL_CONTACTS,
} JPC_ValidateResult;

ENSURE_ENUM_EQ(JPC_VALIDATE_RESULT_ACCEPT_ALL_CONTACTS,
			   JPH::ValidateResult::AcceptAllContactsForThisBodyPair);
ENSURE_ENUM_EQ(JPC_VALIDATE_RESULT_ACCEPT_CONTACT,
			   JPH::ValidateResult::AcceptContact);
ENSURE_ENUM_EQ(JPC_VALIDATE_RESULT_REJECT_CONTACT,
			   JPH::ValidateResult::RejectContact);
ENSURE_ENUM_EQ(JPC_VALIDATE_RESULT_REJECT_ALL_CONTACTS,
			   JPH::ValidateResult::RejectAllContactsForThisBodyPair);

// EBackFaceMode
typedef uint8_t JPC_BackFaceMode;
const JPC_BackFaceMode JPC_BACK_FACE_MODE_IGNORE = 0;
const JPC_BackFaceMode JPC_BACK_FACE_MODE_COLLIDE = 1;

ENSURE_ENUM_EQ(JPC_BACK_FACE_MODE_IGNORE, JPH::EBackFaceMode::IgnoreBackFaces)
ENSURE_ENUM_EQ(JPC_BACK_FACE_MODE_COLLIDE, JPH::EBackFaceMode::CollideWithBackFaces)

typedef enum JPC_BodyType: uint8_t {
	JPC_BODY_TYPE_RIGID_BODY = 0,
	JPC_BODY_TYPE_SOFT_BODY  = 1,
} JPC_BodyType;

ENSURE_ENUM_EQ(JPC_BODY_TYPE_RIGID_BODY, JPH::EBodyType::RigidBody)
ENSURE_ENUM_EQ(JPC_BODY_TYPE_SOFT_BODY, JPH::EBodyType::SoftBody)

typedef enum JPC_AllowedDOFs: uint8_t {
	JPC_ALLOWED_DOFS_NONE         = 0b000000,
	JPC_ALLOWED_DOFS_ALL          = 0b111111,
	JPC_ALLOWED_DOFS_TRANSLATIONX = 0b000001,
	JPC_ALLOWED_DOFS_TRANSLATIONY = 0b000010,
	JPC_ALLOWED_DOFS_TRANSLATIONZ = 0b000100,
	JPC_ALLOWED_DOFS_ROTATIONX    = 0b001000,
	JPC_ALLOWED_DOFS_ROTATIONY    = 0b010000,
	JPC_ALLOWED_DOFS_ROTATIONZ    = 0b100000,
	JPC_ALLOWED_DOFS_PLANE2D      = JPC_ALLOWED_DOFS_TRANSLATIONX | JPC_ALLOWED_DOFS_TRANSLATIONY | JPC_ALLOWED_DOFS_ROTATIONZ,
} JPC_AllowedDOFs;

ENSURE_ENUM_EQ(JPC_ALLOWED_DOFS_NONE, JPH::EAllowedDOFs::None)
ENSURE_ENUM_EQ(JPC_ALLOWED_DOFS_ALL, JPH::EAllowedDOFs::All)
ENSURE_ENUM_EQ(JPC_ALLOWED_DOFS_TRANSLATIONX, JPH::EAllowedDOFs::TranslationX)
ENSURE_ENUM_EQ(JPC_ALLOWED_DOFS_TRANSLATIONY, JPH::EAllowedDOFs::TranslationY)
ENSURE_ENUM_EQ(JPC_ALLOWED_DOFS_TRANSLATIONZ, JPH::EAllowedDOFs::TranslationZ)
ENSURE_ENUM_EQ(JPC_ALLOWED_DOFS_ROTATIONX, JPH::EAllowedDOFs::RotationX)
ENSURE_ENUM_EQ(JPC_ALLOWED_DOFS_ROTATIONY, JPH::EAllowedDOFs::RotationY)
ENSURE_ENUM_EQ(JPC_ALLOWED_DOFS_ROTATIONZ, JPH::EAllowedDOFs::RotationZ)
ENSURE_ENUM_EQ(JPC_ALLOWED_DOFS_PLANE2D, JPH::EAllowedDOFs::Plane2D)

typedef enum JPC_Features: uint32_t {
	JPC_FEATURE_DOUBLE_PRECISION = (1 << 0),
	JPC_FEATURE_NEON = (1 << 1),
	JPC_FEATURE_SSE = (1 << 2),
	JPC_FEATURE_SSE4_1 = (1 << 3),
	JPC_FEATURE_SSE4_2 = (1 << 4),
	JPC_FEATURE_AVX = (1 << 5),
	JPC_FEATURE_AVX2 = (1 << 6),
	JPC_FEATURE_AVX512 = (1 << 7),
	JPC_FEATURE_F16C = (1 << 8),
	JPC_FEATURE_LZCNT = (1 << 9),
	JPC_FEATURE_TZCNT = (1 << 10),
	JPC_FEATURE_FMADD = (1 << 11),
	JPC_FEATURE_PLATFORM_DETERMINISTIC = (1 << 12),
	JPC_FEATURE_FLOATING_POINT_EXCEPTIONS = (1 << 13),
	JPC_FEATURE_DEBUG = (1 << 14),
} JPC_Features;

typedef int JPC_ShapeColor;
const JPC_ShapeColor JPC_SHAPE_COLOR_INSTANCE_COLOR = 0;
const JPC_ShapeColor JPC_SHAPE_COLOR_SHAPE_TYPE_COLOR = 1;
const JPC_ShapeColor JPC_SHAPE_COLOR_MOTION_TYPE_COLOR = 2;
const JPC_ShapeColor JPC_SHAPE_COLOR_SLEEP_COLOR = 3;
const JPC_ShapeColor JPC_SHAPE_COLOR_ISLAND_COLOR = 4;
const JPC_ShapeColor JPC_SHAPE_COLOR_MATERIAL_COLOR = 5;

ENSURE_ENUM_EQ(JPC_SHAPE_COLOR_INSTANCE_COLOR, JPH::BodyManager::EShapeColor::InstanceColor)
ENSURE_ENUM_EQ(JPC_SHAPE_COLOR_SHAPE_TYPE_COLOR, JPH::BodyManager::EShapeColor::ShapeTypeColor)
ENSURE_ENUM_EQ(JPC_SHAPE_COLOR_MOTION_TYPE_COLOR, JPH::BodyManager::EShapeColor::MotionTypeColor)
ENSURE_ENUM_EQ(JPC_SHAPE_COLOR_SLEEP_COLOR, JPH::BodyManager::EShapeColor::SleepColor)
ENSURE_ENUM_EQ(JPC_SHAPE_COLOR_ISLAND_COLOR, JPH::BodyManager::EShapeColor::IslandColor)
ENSURE_ENUM_EQ(JPC_SHAPE_COLOR_MATERIAL_COLOR, JPH::BodyManager::EShapeColor::MaterialColor)

typedef int JPC_SoftBodyConstraintColor;
const JPC_SoftBodyConstraintColor JPC_SOFT_BODY_CONSTRAINT_COLOR_CONSTRAINT_TYPE = 0;
const JPC_SoftBodyConstraintColor JPC_SOFT_BODY_CONSTRAINT_COLOR_CONSTRAINT_GROUP = 1;
const JPC_SoftBodyConstraintColor JPC_SOFT_BODY_CONSTRAINT_COLOR_CONSTRAINT_ORDER = 2;

ENSURE_ENUM_EQ(JPC_SOFT_BODY_CONSTRAINT_COLOR_CONSTRAINT_TYPE, JPH::ESoftBodyConstraintColor::ConstraintType);
ENSURE_ENUM_EQ(JPC_SOFT_BODY_CONSTRAINT_COLOR_CONSTRAINT_GROUP, JPH::ESoftBodyConstraintColor::ConstraintGroup);
ENSURE_ENUM_EQ(JPC_SOFT_BODY_CONSTRAINT_COLOR_CONSTRAINT_ORDER, JPH::ESoftBodyConstraintColor::ConstraintOrder);

// EActiveEdgeMode
typedef uint8_t JPC_ActiveEdgeMode;
const JPC_ActiveEdgeMode JPC_ACTIVE_EDGE_MODE_COLLIDE_ONLY_WITH_ACTIVE = 0;
const JPC_ActiveEdgeMode JPC_ACTIVE_EDGE_MODE_COLLIDE_WITH_ALL = 1;

ENSURE_ENUM_EQ(JPC_ACTIVE_EDGE_MODE_COLLIDE_ONLY_WITH_ACTIVE, JPH::EActiveEdgeMode::CollideOnlyWithActive);
ENSURE_ENUM_EQ(JPC_ACTIVE_EDGE_MODE_COLLIDE_WITH_ALL, JPH::EActiveEdgeMode::CollideWithAll);

// ECollectFacesMode
typedef uint8_t JPC_CollectFacesMode;
const JPC_CollectFacesMode JPC_COLLECT_FACES_MODE_COLLECT_FACES = 0;
const JPC_CollectFacesMode JPC_COLLECT_FACES_MODE_NO_FACES = 1;

ENSURE_ENUM_EQ(JPC_COLLECT_FACES_MODE_COLLECT_FACES, JPH::ECollectFacesMode::CollectFaces);
ENSURE_ENUM_EQ(JPC_COLLECT_FACES_MODE_NO_FACES, JPH::ECollectFacesMode::NoFaces);
