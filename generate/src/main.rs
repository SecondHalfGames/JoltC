mod emit;

#[macro_use]
mod macros;

use std::fmt::Write;

use self::emit::{MirrorStruct, StructField};

static STRUCTS: &[MirrorStruct] = &include_mirrored_structs!("input/ReflectedStructs.h");

fn main() {
    if let Err(err) = generate() {
        eprintln!("Fatal error: {err:?}");
    }
}

fn generate() -> anyhow::Result<()> {
    let mut header = String::new();

    writeln!(header, "#pragma once")?;
    writeln!(header, "// Generated by JoltC-generate")?;
    writeln!(header)?;

    for struc in STRUCTS {
        struc.emit_header(&mut header)?;
    }

    let mut cpp = String::new();

    writeln!(cpp, "// Generated by JoltC-generate")?;
    writeln!(cpp)?;

    for struc in STRUCTS {
        struc.emit_impl(&mut cpp)?;
    }

    fs_err::write("JoltC/Generated.h", header)?;
    fs_err::write("JoltCImpl/Generated.h", cpp)?;

    Ok(())
}
