mod emit;

#[macro_use]
mod macros;

use std::fmt::Write;
use std::sync::OnceLock;

use self::emit::{EnumMember, MirrorEnum, MirrorStruct, StructField};

pub static BUILTIN_TYPES: &[&str] = &include_builtin_types!();

pub fn structs() -> &'static [MirrorStruct] {
    static STRUCTS: &[MirrorStruct] = &include_mirrored_structs!();

    STRUCTS
}

pub fn enums() -> &'static [MirrorEnum] {
    static ENUMS: OnceLock<Vec<MirrorEnum>> = OnceLock::new();

    ENUMS.get_or_init(|| include_mirrored_enums!())
}

fn main() {
    if let Err(err) = generate() {
        eprintln!("Fatal error: {err:?}");
    }
}

fn generate() -> anyhow::Result<()> {
    let mut header = String::new();

    writeln!(header, "#pragma once")?;
    writeln!(header, "// Generated by JoltC-generate")?;
    writeln!(header)?;

    for e in enums() {
        e.emit_header(&mut header)?;
    }

    for struc in structs() {
        struc.emit_header(&mut header)?;
    }

    let mut cpp = String::new();

    writeln!(cpp, "// Generated by JoltC-generate")?;
    writeln!(cpp)?;

    for struc in structs() {
        struc.emit_impl(&mut cpp)?;
    }

    fs_err::write("JoltC/Generated.h", header)?;
    fs_err::write("JoltCImpl/Generated.h", cpp)?;

    Ok(())
}
